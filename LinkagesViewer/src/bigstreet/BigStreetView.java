/*
 * BigStreetView.java
 */

package bigstreet;

import bigstreet.controllers.AppController;
import bigstreet.models.Diagnosis;
import bigstreet.models.GraphNode;
import bigstreet.models.Outcome;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.MenuItem;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.MenuElement;

/**
 * The application's main frame.
 */
public class BigStreetView extends FrameView {

    public BigStreetView(SingleFrameApplication app) {
        super(app);

        initComponents();
        this.setMenuBar(menuBar);

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // Give AppController a handle on me
        AppController.setMainWindow(this);
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = BigStreetApp.getApplication().getMainFrame();
            aboutBox = new BigStreetAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        BigStreetApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        LeftSideBar = new javax.swing.JPanel();
        CurrentSelectionTabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentSelectionDescriptionTextArea = new javax.swing.JTextArea();
        currentNodeNameLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        correlatedDiagnosesList = new javax.swing.JList();
        addCorrelatedDiagnosisButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        outcomesList = new javax.swing.JList();
        addOutcomeButton = new javax.swing.JButton();
        OutcomeFilterComboBox = new javax.swing.JComboBox();
        CurrentSelectionLabel = new javax.swing.JLabel();
        LeftSideBarAddvsSelectionSeparator = new javax.swing.JSeparator();
        AddDiagnosisPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        addDiagnosisTextField = new javax.swing.JTextField();
        DiagnosisSearchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        diagnosisSearchResults = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        GraphParentPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        moveGraphMenuItem = new javax.swing.JRadioButtonMenuItem();
        moveNodeMenuItem = new javax.swing.JRadioButtonMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        openFileDialog = new javax.swing.JFileChooser();
        saveFileDialog = new javax.swing.JFileChooser();
        addLinkedNodePopupMenu = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setSize(new java.awt.Dimension(100, 100));

        LeftSideBar.setName("LeftSideBar"); // NOI18N

        CurrentSelectionTabbedPane.setAutoscrolls(true);
        CurrentSelectionTabbedPane.setEnabled(false);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bigstreet.BigStreetApp.class).getContext().getResourceMap(BigStreetView.class);
        CurrentSelectionTabbedPane.setFont(resourceMap.getFont("CurrentSelectionTabbedPane.font")); // NOI18N
        CurrentSelectionTabbedPane.setName("CurrentSelectionTabbedPane"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        currentSelectionDescriptionTextArea.setBackground(resourceMap.getColor("currentSelectionDescriptionTextArea.background")); // NOI18N
        currentSelectionDescriptionTextArea.setColumns(18);
        currentSelectionDescriptionTextArea.setEditable(false);
        currentSelectionDescriptionTextArea.setForeground(resourceMap.getColor("currentSelectionDescriptionTextArea.foreground")); // NOI18N
        currentSelectionDescriptionTextArea.setLineWrap(true);
        currentSelectionDescriptionTextArea.setRows(5);
        currentSelectionDescriptionTextArea.setWrapStyleWord(true);
        currentSelectionDescriptionTextArea.setBorder(null);
        currentSelectionDescriptionTextArea.setName("currentSelectionDescriptionTextArea"); // NOI18N
        jScrollPane2.setViewportView(currentSelectionDescriptionTextArea);

        currentNodeNameLabel.setFont(resourceMap.getFont("currentNodeNameLabel.font")); // NOI18N
        currentNodeNameLabel.setText(resourceMap.getString("currentNodeNameLabel.text")); // NOI18N
        currentNodeNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        currentNodeNameLabel.setName("currentNodeNameLabel"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(currentNodeNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addContainerGap())
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(currentNodeNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        CurrentSelectionTabbedPane.addTab(resourceMap.getString("jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPanel3.setName("jPanel3"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        correlatedDiagnosesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        correlatedDiagnosesList.setName("correlatedDiagnosesList"); // NOI18N
        jScrollPane3.setViewportView(correlatedDiagnosesList);

        addCorrelatedDiagnosisButton.setLabel(resourceMap.getString("addCorrelatedDiagnosisButton.label")); // NOI18N
        addCorrelatedDiagnosisButton.setName("addCorrelatedDiagnosisButton"); // NOI18N
        addCorrelatedDiagnosisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCorrelatedDiagnosisButtonActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jLabel2)
                .addContainerGap(104, Short.MAX_VALUE))
            .add(jPanel3Layout.createSequentialGroup()
                .add(addCorrelatedDiagnosisButton)
                .addContainerGap())
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jLabel2)
                .add(7, 7, 7)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(addCorrelatedDiagnosisButton))
        );

        CurrentSelectionTabbedPane.addTab(resourceMap.getString("jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        jPanel5.setName("jPanel5"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        outcomesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        outcomesList.setName("outcomesList"); // NOI18N
        jScrollPane4.setViewportView(outcomesList);

        addOutcomeButton.setLabel(resourceMap.getString("addOutcomeButton.label")); // NOI18N
        addOutcomeButton.setName("addOutcomeButton"); // NOI18N
        addOutcomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOutcomeButtonActionPerformed(evt);
            }
        });

        OutcomeFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Linked Outcomes", "Correlated Outcomes", "All Outcomes" }));
        OutcomeFilterComboBox.setName("OutcomeFilterComboBox"); // NOI18N
        OutcomeFilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutcomeFilterComboBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(OutcomeFilterComboBox, 0, 239, Short.MAX_VALUE)
            .add(jPanel5Layout.createSequentialGroup()
                .add(addOutcomeButton)
                .addContainerGap())
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(OutcomeFilterComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addOutcomeButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CurrentSelectionTabbedPane.addTab(resourceMap.getString("jPanel5.TabConstraints.tabTitle"), jPanel5); // NOI18N

        CurrentSelectionLabel.setText(resourceMap.getString("CurrentSelectionLabel.text")); // NOI18N
        CurrentSelectionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        CurrentSelectionLabel.setName("CurrentSelectionLabel"); // NOI18N

        LeftSideBarAddvsSelectionSeparator.setName("LeftSideBarAddvsSelectionSeparator"); // NOI18N

        AddDiagnosisPanel.setName("AddDiagnosisPanel"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setName("jLabel1"); // NOI18N

        addDiagnosisTextField.setText(resourceMap.getString("addDiagnosisTextField.text")); // NOI18N
        addDiagnosisTextField.setAlignmentX(0.0F);
        addDiagnosisTextField.setAlignmentY(0.0F);
        addDiagnosisTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        addDiagnosisTextField.setName("addDiagnosisTextField"); // NOI18N
        addDiagnosisTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchField_return(evt);
            }
        });

        DiagnosisSearchButton.setText(resourceMap.getString("DiagnosisSearchButton.text")); // NOI18N
        DiagnosisSearchButton.setName("DiagnosisSearchButton"); // NOI18N
        DiagnosisSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddDiagnosisSearch(evt);
            }
        });
        DiagnosisSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiagnosisSearchButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        diagnosisSearchResults.setName("diagnosisSearchResults"); // NOI18N
        jScrollPane1.setViewportView(diagnosisSearchResults);

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout AddDiagnosisPanelLayout = new org.jdesktop.layout.GroupLayout(AddDiagnosisPanel);
        AddDiagnosisPanel.setLayout(AddDiagnosisPanelLayout);
        AddDiagnosisPanelLayout.setHorizontalGroup(
            AddDiagnosisPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLabel1)
            .add(AddDiagnosisPanelLayout.createSequentialGroup()
                .add(addDiagnosisTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DiagnosisSearchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jScrollPane1)
            .add(AddDiagnosisPanelLayout.createSequentialGroup()
                .add(jButton2)
                .addContainerGap())
        );
        AddDiagnosisPanelLayout.setVerticalGroup(
            AddDiagnosisPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AddDiagnosisPanelLayout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(AddDiagnosisPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addDiagnosisTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DiagnosisSearchButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2))
        );

        org.jdesktop.layout.GroupLayout LeftSideBarLayout = new org.jdesktop.layout.GroupLayout(LeftSideBar);
        LeftSideBar.setLayout(LeftSideBarLayout);
        LeftSideBarLayout.setHorizontalGroup(
            LeftSideBarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(LeftSideBarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                .add(AddDiagnosisPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(LeftSideBarAddvsSelectionSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(CurrentSelectionLabel))
            .add(CurrentSelectionTabbedPane, 0, 0, Short.MAX_VALUE)
        );
        LeftSideBarLayout.setVerticalGroup(
            LeftSideBarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(LeftSideBarLayout.createSequentialGroup()
                .add(AddDiagnosisPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(LeftSideBarAddvsSelectionSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CurrentSelectionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CurrentSelectionTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 294, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        GraphParentPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        GraphParentPanel.setName("GraphParentPanel"); // NOI18N

        org.jdesktop.layout.GroupLayout GraphParentPanelLayout = new org.jdesktop.layout.GroupLayout(GraphParentPanel);
        GraphParentPanel.setLayout(GraphParentPanelLayout);
        GraphParentPanelLayout.setHorizontalGroup(
            GraphParentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 693, Short.MAX_VALUE)
        );
        GraphParentPanelLayout.setVerticalGroup(
            GraphParentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 585, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(LeftSideBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(GraphParentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(LeftSideBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(GraphParentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        statusPanel.setName("statusPanel"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE, Short.MAX_VALUE)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 819, Short.MAX_VALUE)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusMessageLabel)
                    .add(statusAnimationLabel)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItem_click(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItem_click(evt);
            }
        });
        fileMenu.add(openMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        fileMenu.add(jSeparator1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(bigstreet.BigStreetApp.class).getContext().getActionMap(BigStreetView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText(resourceMap.getString("viewMenu.text")); // NOI18N
        viewMenu.setName("viewMenu"); // NOI18N

        moveGraphMenuItem.setSelected(true);
        moveGraphMenuItem.setText(resourceMap.getString("moveGraphMenuItem.text")); // NOI18N
        moveGraphMenuItem.setName("moveGraphMenuItem"); // NOI18N
        moveGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveGraphMenuItem_clicked(evt);
            }
        });
        viewMenu.add(moveGraphMenuItem);

        moveNodeMenuItem.setText(resourceMap.getString("moveNodeMenuItem.text")); // NOI18N
        moveNodeMenuItem.setName("moveNodeMenuItem"); // NOI18N
        moveNodeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveNodeMenuItem_clicked(evt);
            }
        });
        viewMenu.add(moveNodeMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        openFileDialog.setName("openFileDialog"); // NOI18N
        openFileDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileDialog_action(evt);
            }
        });

        saveFileDialog.setName("saveFileDialog"); // NOI18N
        saveFileDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileDialog_action(evt);
            }
        });

        addLinkedNodePopupMenu.setName("addLinkedNodePopupMenu"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        addLinkedNodePopupMenu.add(jMenuItem1);

        setComponent(mainPanel);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void AddDiagnosisSearch(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddDiagnosisSearch
        
    }//GEN-LAST:event_AddDiagnosisSearch

    private void DiagnosisSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiagnosisSearchButtonActionPerformed
        diagnosisSearchResults.setModel(AppController.search(addDiagnosisTextField.getText()));
    }//GEN-LAST:event_DiagnosisSearchButtonActionPerformed

    public void setCorrelatedDiagnosises(DefaultListModel correlatedDiagnoses) {
        this.correlatedDiagnosesList.removeAll();
        this.correlatedDiagnosesList.setModel(correlatedDiagnoses);
    }

    public void setLinkedOutcomes(DefaultListModel linkedCorrelations) {
        this.outcomesList.removeAll();
        this.outcomesList.setModel(linkedCorrelations);
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String diagnosis_name = diagnosisSearchResults.getSelectedValue().toString();
        Integer index = diagnosisSearchResults.getSelectedIndex();
        HashMap<Integer, Diagnosis> diagnoses = AppController.get_searchResultObjects();
        Diagnosis d = diagnoses.get(index);
        AppController.addDiagnosisToDisplay(d);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void saveMenuItem_click(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItem_click
        saveFileDialog.showSaveDialog(mainPanel);
    }//GEN-LAST:event_saveMenuItem_click

    private void openMenuItem_click(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItem_click
        openFileDialog.showOpenDialog(mainPanel);
    }//GEN-LAST:event_openMenuItem_click

    private void saveFileDialog_action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileDialog_action
        AppController.saveCurrentView(saveFileDialog.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_saveFileDialog_action

    private void openFileDialog_action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileDialog_action
        AppController.loadSavedView(openFileDialog.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_openFileDialog_action

    private void addCorrelatedDiagnosisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCorrelatedDiagnosisButtonActionPerformed
        AppController.addDiagnosisToDisplay((Diagnosis) correlatedDiagnosesList.getSelectedValue());
    }//GEN-LAST:event_addCorrelatedDiagnosisButtonActionPerformed

    private void searchField_return(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchField_return
        // Pretend someone clicked "Search"
        DiagnosisSearchButtonActionPerformed(evt);
    }//GEN-LAST:event_searchField_return

    private void moveGraphMenuItem_clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveGraphMenuItem_clicked
        AppController.setMouseMode(ModalGraphMouse.Mode.TRANSFORMING);
    }//GEN-LAST:event_moveGraphMenuItem_clicked

    private void moveNodeMenuItem_clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveNodeMenuItem_clicked
        AppController.setMouseMode(ModalGraphMouse.Mode.PICKING);
    }//GEN-LAST:event_moveNodeMenuItem_clicked

    private void OutcomeFilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutcomeFilterComboBoxActionPerformed
        String selected = (String) OutcomeFilterComboBox.getSelectedItem();
        System.out.println(selected);
        AppController.setOutcomesForSelectedDiagnosis(((Diagnosis) AppController.getLastSelectedNode().getNNNObject()),selected);
    }//GEN-LAST:event_OutcomeFilterComboBoxActionPerformed

    private void addOutcomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOutcomeButtonActionPerformed
        Outcome selected_outcome = (Outcome) this.outcomesList.getSelectedValue();
        AppController.addOutcomeToDisplay(selected_outcome);
    }//GEN-LAST:event_addOutcomeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddDiagnosisPanel;
    private javax.swing.JLabel CurrentSelectionLabel;
    private javax.swing.JTabbedPane CurrentSelectionTabbedPane;
    private javax.swing.JButton DiagnosisSearchButton;
    private javax.swing.JPanel GraphParentPanel;
    private javax.swing.JPanel LeftSideBar;
    private javax.swing.JSeparator LeftSideBarAddvsSelectionSeparator;
    private javax.swing.JComboBox OutcomeFilterComboBox;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addCorrelatedDiagnosisButton;
    private javax.swing.JTextField addDiagnosisTextField;
    private javax.swing.JPopupMenu addLinkedNodePopupMenu;
    private javax.swing.JButton addOutcomeButton;
    private javax.swing.JList correlatedDiagnosesList;
    private javax.swing.JLabel currentNodeNameLabel;
    private javax.swing.JTextArea currentSelectionDescriptionTextArea;
    private javax.swing.JList diagnosisSearchResults;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButtonMenuItem moveGraphMenuItem;
    private javax.swing.JRadioButtonMenuItem moveNodeMenuItem;
    private javax.swing.JFileChooser openFileDialog;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JList outcomesList;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JFileChooser saveFileDialog;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    private VisualizationViewer graphView;

    //public void setSelectedNodeInfo(GraphNode node) {
    //    this.CurrentSelectionInfoTextPane.setText(node.getDescription());
    //}

    public void setSelectedNodeName(GraphNode node) {
        this.currentNodeNameLabel.setText(node.getName());
    }

    public void setSelectedNodeDescription(GraphNode node) {
        this.currentSelectionDescriptionTextArea.setText(node.getDescription());
    }

    public void displayNodeInfo(GraphNode node) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    public void displayNodeInfo(String string) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    public void enableCurrentSelectedNodePanel() {
        CurrentSelectionTabbedPane.enable();
    }

    public void update() {
        // Remove last graph from window
        if(graphView != null)
                GraphParentPanel.remove(graphView);

        // Add new graph to window
        if(AppController.getGraphToDisplay() != null)
        {
                graphView = AppController.getGraphToDisplay().getView();
                GraphParentPanel.add(graphView, BorderLayout.CENTER);
        }


        // Redraw window so graph shows up
        GraphParentPanel.validate();
    }

    public void setGraphView(VisualizationViewer vv) {
        GraphParentPanel.setLayout(new BorderLayout());
        graphView = vv;
        GraphParentPanel.add(graphView, BorderLayout.CENTER);
    }

    public void setMouseMode(ModalGraphMouse.Mode mode)
    {
        switch(mode)
        {
            case TRANSFORMING:
                moveGraphMenuItem.setSelected(true);
                moveNodeMenuItem.setSelected(false);
                break;
            case PICKING:
                moveGraphMenuItem.setSelected(false);
                moveNodeMenuItem.setSelected(true);
                break;
        }
    }

    public void showPopupMenu(int x, int y, List<String> nodeNames)
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bigstreet.BigStreetApp.class).getContext().getResourceMap(BigStreetView.class);
        addLinkedNodePopupMenu.removeAll();

        for (String s : nodeNames)
        {
            if(s.equals("SUGGESTED") || s.equals("OPTIONAL"))
            {
                addLinkedNodePopupMenu.add((new JSeparator()));
            }

            JMenuItem menuItem = new JMenuItem(s);
            menuItem.setName(s);
            menuItem.setAction(new popupMenuItem_click());
            

            if(s.equals("MAJOR") || s.equals("SUGGESTED")
                    || s.equals("OPTIONAL"))
            {
                menuItem.setEnabled(false);
            }

            addLinkedNodePopupMenu.add(menuItem);
        }
        
        // Netbeans is being dumb so we have to loop through them
        // and set their names again. Who knows why.
        for (MenuElement e : addLinkedNodePopupMenu.getSubElements())
        {
            ((JMenuItem)e).setText(((JMenuItem)e).getName());
        }

        addLinkedNodePopupMenu.show(GraphParentPanel, x, y);
        
    }

    private class popupMenuItem_click extends AbstractAction
    {

        public void actionPerformed(ActionEvent e) {
            String nodeName = ((JMenuItem)e.getSource()).getText();
            AppController.addNodeFromPopupMenu(nodeName);
        }
    }
}
